{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","useStyles","makeStyles","theme","tableBackground","width","padding","backgroundColor","border","borderRadius","boxShadow","marginTop","marginLeft","marginRight","textAlign","color","liveText","fontSize","headerOneText","headerTwoText","headerThreeText","headerFourText","headerText","loginForm","floatRight","float","root","flexGrow","menuButton","spacing","title","list","fullList","textDecoration","table","minWidth","backdrop","zIndex","drawer","scrollToElementD","document","getElementById","topPos","lastChild","offsetTop","console","log","scrollTop","Live2dPage","liveDataIo","checked","Grow","in","style","transformOrigin","timeout","className","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","Live2dChatPage","live2dchatmessage","sendMessage","messageRef","React","createRef","id","map","message","username","TextField","inputRef","type","label","variant","Button","onClick","current","value","focus","margin","ChatRoom","Live2dHistoryPage","get2dhistory","get2dhistorystate","startDate2dRef","endDate2dRef","onSubmit","evt","preventDefault","startdate","enddate","InputLabelProps","shrink","required","history","date","time","number","Live3dHistoryPage","get3dhistory","get3dhistorystate","PhotoMainPage","x","window","location","hash","photoId","parseInt","isNaN","ViewImage","useParams","viewDecrypt","decryptedSrc","vImage","passwordImage","imageId","v","src","alt","password","display","disabled","to","Title","LoginForm","login","send","fileRef","passwordRef","imageTextRef","useState","imgSrc","setImgSrc","image","length","alert","onLoad","maxWidth","autoFocus","accept","onChange","files","reader","FileReader","onload","e","target","result","readAsDataURL","minlength","AboutApp","activeStep","steps","Stepper","orientation","index","Step","key","StepLabel","StepContent","Typography","step","getStepContent","DialogOk","dialogOkState","closeDialogOk","status","content","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","DialogShare","dialogShareState","closeDialogShare","shareDialogShare","copyDialogShare","createData","email","App","classes","tableBorder","live2dnum","setLive2dnum","Date","live2dtime","setLive2dtime","modern","live2dnine","setLive2dnine","live2dtwo","setLive2dtwo","setLive2dchatmessage","setChecked","num","numtype_id","modified_date","numtype","Object","typename","typenamemm","setLiveDataIo","setUsers","user","setUser","setDecryptedSrc","setBackdrop","backdropText","setBackdropText","pathname","internalLink","setInternalLink","setDialogOkState","setDialogShareState","setget2dhistorystate","messageListCustom","msg","formData","FormData","append","oReq","XMLHttpRequest","this","responseText","data","trim","JSON","parse","error","setTimeout","openDialogShare","openDialogOk","upload","addEventListener","oEvent","lengthComputable","percentComplete","loaded","total","webserviceBaseUrl","fetch","method","body","then","res","text","role","localStorage","setItem","stringify","selectAllUser","limit","last_id","catch","err","jwt","i","dataTemp","d","serial_no","navigator","clipboard","writeText","copyText","left","state","setState","toggleDrawer","anchor","event","useEffect","socketIOClient","on","setInterval","char","prev","msgObj","url","href","substr","Backdrop","CircularProgress","Android","share","exp","push","AppBar","position","Toolbar","IconButton","edge","Fragment","Drawer","logout","clsx","onKeyDown","List","ListItem","ListItemIcon","ListItemText","path","exact","colspan","rowspan","onprogress","kb","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98867867.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { useEffect } from \"react\"; \nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\n//import MenuIcon from '@material-ui/core/MenuIcon';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\n\nimport Snackbar from '@material-ui/core/Snackbar';\n\n\n\nimport Backdrop from '@material-ui/core/Backdrop';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\n\n\nimport {    BrowserRouter as Router,    Switch,    Route,    Link as ReactLink, useParams, Redirect } from \"react-router-dom\";\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nimport clsx from 'clsx';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport InfoIcon from '@material-ui/icons/Info';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport Alert from '@material-ui/lab/Alert';\nimport { AlertTitle } from '@material-ui/lab';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\n\n\nimport Grow from '@material-ui/core/Grow';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:5508\";\nvar socket;\n\nconst useStyles = makeStyles((theme) => ({\n  tableBackground : {\n    width : \"80%\",\n    padding : \"10px\",\n    backgroundColor : \"#3f51b5\",\n    border : \"1px solid gray\",\n    borderRadius : \"10px\",\n    boxShadow : \"10px 10px 10px gray\",\n    marginTop : \"20px\",\n    marginLeft : \"10%\",\n    marginRight : \"10%\",\n    textAlign : \"center\",\n    color : \"#ffffff\"\n  },\n  liveText : {\n    color : \"#ffffff\",\n    fontSize : \"72px\"\n  },\n  headerOneText : {\n    fontSize : \"18px\",\n  },\n  headerTwoText : {\n    fontSize : \"16px\",\n    color : \"gray\"\n  },\n  headerThreeText : {\n    color : \"green\",\n    fontSize : \"36px\"\n  },\n  headerFourText : {\n    color : \"yellow\",\n  },\n  headerText : {\n    color : \"#ffffff\",\n    fontSize : \"72px\"\n  },\n  loginForm : {\n    border : \"1px solid gray\",\n    backgroundColor : \"red\"\n  },\n  floatRight:{\n    float : \"right\"\n  },\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n  textDecoration:{\n    textDecoration : 'none'\n  },\n  table: {\n    minWidth: 650,\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  }\n}));\n\n\nfunction getSteps() {\n  return ['Select photo', 'Type password', 'Send and share link'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return `For each ad campaign that you create, you can control how much\n              you're willing to spend on clicks and conversions, which networks\n              and geographical locations you want your ads to show on, and more.`;\n    case 1:\n      return 'An ad group contains one or more ads which target a shared set of keywords.';\n    case 2:\n      return `Try out different ad text to see what brings in the most customers,\n              and learn how to enhance your ads using features like ad extensions.\n              If you run into any problems with your ads, find out how to tell if\n              they're running and how to resolve approval issues.`;\n    default:\n      return 'Unknown step';\n  }\n}\n\n\nfunction scrollToElementD(){\n  if(document.getElementById('messageDiv') === null ) return;\n  let topPos = document.getElementById('messageDiv').lastChild.offsetTop;\n  console.log(\"topPos is \"+topPos);\n  //var topPos = document.getElementById('inner-element').offsetTop;\n  document.getElementById('messageDiv').scrollTop = topPos-10;\n}\n\n\nconst Live2dPage = ({liveDataIo,checked}) =>{\n  \n  return (\n    <div>\n      <div>\n        <h3>\n          LIVE DATA IO : {liveDataIo[\"1\"][\"num\"]}</h3>\n        <Grow \n          in={checked} \n          style={{ transformOrigin: '0 0 0' }}\n          {...(checked ? { timeout: 1000 } : {})}\n        >\n          <span className=\"livenum\">{liveDataIo[\"1\"][\"num\"]}</span>\n\n        </Grow>\n        <br></br>\n        <span>{liveDataIo[\"1\"][\"modified_date\"]} </span>\n      </div>\n\n      \n      <TableContainer component={Paper}>\n              <Table  aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Time</TableCell>\n                    <TableCell>Internet</TableCell>\n                    <TableCell>Modern</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                      <TableCell>9:30 AM</TableCell>\n                      <TableCell>{liveDataIo[\"8\"][\"num\"]}</TableCell>\n                      <TableCell>{liveDataIo[\"10\"][\"num\"]}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>2:00 PM</TableCell>\n                      <TableCell>{liveDataIo[\"9\"][\"num\"]}</TableCell>\n                      <TableCell>{liveDataIo[\"11\"][\"num\"]}</TableCell>\n                    </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n\n\n\n      \n    </div>\n  )\n}\n\nconst Live2dChatPage = ({liveDataIo,checked,live2dchatmessage,sendMessage}) =>{\n  const messageRef =  React.createRef();\n  const internalSend = ()=>{\n    let message = messageRef.current.value;\n    let username = \"me\";\n    console.log(\"internalSend => \"+message);\n    let msgObj = {username,message}\n    if(message != \"\") {\n      sendMessage(msgObj);\n      messageRef.current.value = \"\";\n      messageRef.current.focus();\n    }\n  }\n  return (\n    <div>\n      <TableContainer component={Paper}>\n              <Table  aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Internet</TableCell>\n                    <TableCell>Live</TableCell>\n                    <TableCell>Modern</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                      <TableCell>{liveDataIo[\"8\"][\"num\"]} ~ {liveDataIo[\"9\"][\"num\"]}</TableCell>\n                      \n                      <TableCell>\n                        <Grow \n                          in={checked} \n                          style={{ transformOrigin: '0 0 0' }}\n                          {...(checked ? { timeout: 1000 } : {})}\n                        >\n                          <span className=\"livenum2\">{liveDataIo[\"1\"][\"num\"]}</span>\n                        </Grow>\n                        </TableCell>\n\n                        <TableCell>{liveDataIo[\"10\"][\"num\"]} ~ {liveDataIo[\"11\"][\"num\"]}</TableCell>\n                    </TableRow>\n                </TableBody>\n              </Table>\n      </TableContainer>\n      <div className=\"messageDiv\" id=\"messageDiv\">\n        {live2dchatmessage.map((message)=>(\n          <p className=\"messagepara\"><span className=\"username\">{message.username}</span> : <span  className=\"message\">{message.message}</span></p>\n        ))}\n      </div>\n      <div className=\"marginTop\">\n\n\n      <TextField inputRef={messageRef}  type=\"text\" label=\"Message\" variant=\"outlined\" />\n        <Button onClick={internalSend} style={{margin:10}}  variant=\"outlined\" color=\"secondary\"> >> Send</Button>\n      </div>\n    </div>\n  )\n}\n\nconst ChatRoom = ({liveDataIo,checked,live2dchatmessage,sendMessage}) =>{\n  const messageRef =  React.createRef();\n  const internalSend = ()=>{\n    let message = messageRef.current.value;\n    let username = \"me\";\n    console.log(\"internalSend => \"+message);\n    let msgObj = {username,message}\n    if(message != \"\") {\n      sendMessage(msgObj);\n      messageRef.current.value = \"\";\n      messageRef.current.focus();\n    }\n  }\n  return (\n    <div>\n      <div className=\"messageDiv\" id=\"messageDiv\">\n        {live2dchatmessage.map((message)=>(\n          <p className=\"messagepara\"><span className=\"username\">{message.username}</span> : <span  className=\"message\">{message.message}</span></p>\n        ))}\n      </div>\n      <div className=\"marginTop\">\n      <TextField inputRef={messageRef}  type=\"text\" label=\"Message\" variant=\"outlined\" />\n        <Button onClick={internalSend} style={{margin:10}}  variant=\"outlined\" color=\"secondary\"> >> Send</Button>\n      </div>\n    </div>\n  )\n}\nconst Live2dHistoryPage = ({get2dhistory,get2dhistorystate}) =>{\n  const startDate2dRef =  React.createRef();\n  const endDate2dRef =  React.createRef();\n  const internalSubmit = (evt) =>{\n    evt.preventDefault();\n    console.log(\"internal submit\");\n    let startdate = startDate2dRef.current.value;\n    let enddate = endDate2dRef.current.value;\n    console.log({startdate,enddate});\n    // validate two date \n    if(startdate == \"\" ) return;\n    if(enddate == \"\" ) return;\n    get2dhistory({startdate,enddate});\n  }\n  return (\n    <div>\n      <div>\n        <h3>2D History</h3>\n      <form onSubmit={internalSubmit}>\n            \n            <TextField\n              type=\"date\"\n              label=\"Start Date\"\n              inputRef={startDate2dRef} \n              InputLabelProps={{\n                shrink: true,\n              }}\n              style={{margin:10}}\n              required\n            />\n            <TextField\n              type=\"date\"\n              label=\"End Date\"\n              inputRef={endDate2dRef} \n              InputLabelProps={{\n                shrink: true,\n              }}\n              style={{margin:10}}\n              required\n            />\n\n          <Button \n              variant=\"contained\" color=\"primary\"\n              style={{margin:10}}\n               type=\"submit\" >\n                 Search\n          </Button>\n        </form>\n      </div>\n\n      \n      <TableContainer component={Paper}>\n              <Table  aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Time</TableCell>\n                    <TableCell>Number</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {get2dhistorystate.map((history)=>{\n                    return (\n                      <TableRow>\n                        <TableCell>{history.date}</TableCell>\n                        <TableCell>{history.time}</TableCell>\n                        <TableCell>{history.number}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                    <TableRow>\n                      <TableCell>2020-05-01</TableCell>\n                      <TableCell>11:00</TableCell>\n                      <TableCell>55</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>2020-05-01</TableCell>\n                      <TableCell>16:00</TableCell>\n                      <TableCell>08</TableCell>\n                    </TableRow>                    \n                </TableBody>\n              </Table>\n            </TableContainer>\n\n\n\n      \n    </div>\n  )\n}\n\nconst Live3dHistoryPage = ({get3dhistory,get3dhistorystate}) =>{\n  const startDate2dRef =  React.createRef();\n  const endDate2dRef =  React.createRef();\n  const internalSubmit = (evt) =>{\n    evt.preventDefault();\n    console.log(\"internal submit\");\n    let startdate = startDate2dRef.current.value;\n    let enddate = endDate2dRef.current.value;\n    console.log({startdate,enddate});\n    // validate two date \n    if(startdate == \"\" ) return;\n    if(enddate == \"\" ) return;\n    get3dhistory({startdate,enddate});\n  }\n  return (\n    <div>\n      <div>\n        <h3>3D History</h3>\n      <form onSubmit={internalSubmit}>\n            \n            <TextField\n              type=\"date\"\n              label=\"Start Date\"\n              inputRef={startDate2dRef} \n              InputLabelProps={{\n                shrink: true,\n              }}\n              style={{margin:10}}\n              required\n            />\n            <TextField\n              type=\"date\"\n              label=\"End Date\"\n              inputRef={endDate2dRef} \n              InputLabelProps={{\n                shrink: true,\n              }}\n              style={{margin:10}}\n              required\n            />\n\n          <Button \n              variant=\"contained\" color=\"primary\"\n              style={{margin:10}}\n               type=\"submit\" >\n                 Search\n          </Button>\n        </form>\n      </div>\n\n      \n      <TableContainer component={Paper}>\n              <Table  aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Time</TableCell>\n                    <TableCell>Number</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {get3dhistorystate.map((history)=>{\n                    return (\n                      <TableRow>\n                        <TableCell>{history.date}</TableCell>\n                        <TableCell>{history.time}</TableCell>\n                        <TableCell>{history.number}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                    <TableRow>\n                      <TableCell>2020-05-01</TableCell>\n                      <TableCell>11:00</TableCell>\n                      <TableCell>558</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>2020-05-01</TableCell>\n                      <TableCell>16:00</TableCell>\n                      <TableCell>086</TableCell>\n                    </TableRow>                    \n                </TableBody>\n              </Table>\n            </TableContainer>\n\n\n\n      \n    </div>\n  )\n}\nconst PhotoMainPage = () =>{\n  console.log(\"hello\");\n  let x = window.location.hash;\n  console.log(\"hash \"+x);\n    let photoId = parseInt(x);\n    console.log(\"redirect to x page\");\n    console.log(photoId);\n    if(isNaN(photoId)){\n      console.log(\"is nan\");\n      // do nothing\n    }else{\n      console.log(\"is not nan, so may be number :S\");\n      // redirect to view page with view para\n    } \n  \n  return (\n    <div>\n      \n      \n    </div>\n  )\n}\n\n\nconst ViewImage = ({useParams,viewDecrypt,decryptedSrc}) =>{\n  const vImage = React.createRef();\n  const passwordImage = React.createRef();\n\n  let {v} = useParams();\n  let imageId = v;\n\n  const internalView = (evt) =>{\n    evt.preventDefault();\n    console.log(\"internalView\");\n    let v = vImage.current.value;\n    let password = passwordImage.current.value;\n    console.log({v,password});\n    viewDecrypt({v,password});\n  }\n  return (\n      <div>\n      <h3>Enter Password to view Image</h3>\n        <img src={decryptedSrc} style={{width:300}} alt=\"this is decrypted image\" />\n        <form onSubmit={internalView}>\n            <TextField  style={{display:\"none\"}} type=\"number\" label=\"ID\" variant=\"outlined\" value={imageId} inputRef={vImage}  disabled required/>\n            <br></br>\n            <br></br>\n            <TextField type=\"password\" label=\"Password\" variant=\"outlined\" inputRef={passwordImage} required/>\n            <br></br>\n            <br></br>\n            <Button type=\"submit\" variant=\"contained\" color=\"default\">\n              View Image\n            </Button>\n\n        </form>\n        \n        <br/><br/><br/>\n        Do you have to send a photo? \n        <ReactLink to=\"/\"  style={{textDecoration:\"none\"}}>\n                           Send\n        </ReactLink>\n        \n      </div>\n  )\n}\n\n\nconst Title = ({title}) =>{\n  return (\n    <div>\n      <h3>Image Steganography</h3>\n      <h4>{title}</h4>\n    </div>\n  )\n}\nconst AlertSuccess = ({alertSuccessState,closeAlert}) =>{\n  let {status,title,content} = alertSuccessState;\n  return (\n    <div>\n      <Alert variant=\"outlined\" className=\"hidden\" severity=\"error\" onClose={closeAlert}>\n        <AlertTitle>Error</AlertTitle>\n        This is an error alert — <strong>check it out!</strong>\n      </Alert>\n      <Alert variant=\"outlined\" severity=\"success\" open={status} onClose={closeAlert}>{title} - {content}</Alert>\n    </div>\n    \n  )\n}\nconst LoginForm = ({login,send}) =>{\n  const usernameRef = React.createRef();\n\n  const fileRef = React.createRef();\n  const passwordRef = React.createRef();\n  const imageTextRef = React.createRef();\n\n  const [imgSrc,setImgSrc] = React.useState('');\n\n  \n  const fileOnChange = (evt) =>{\n    console.log(\"fileOnChange\");\n    //console.log(evt.target.files[0]);\n    console.log(fileRef.current.files[0]);\n\n    var reader = new FileReader();\n    reader.onload = function (e) {\n                imageTextRef.current.value = e.target.result;\n                setImgSrc(e.target.result);\n                //var original_photo_data = document.getElementById('original_photo_data');\n                //original_photo_data.value = e.target.result;\n    };\n    reader.readAsDataURL(fileRef.current.files[0]);\n\n\n    //let ctx = canvasRef.getContext(\"2d\");\n    // ctx.drawImage()\n    // let base64 = canvasRef.toDataURL();\n    // set text on \n    // imageTextRef.current.value = base64; // it is upload string\n    /*\n      we just need two string\n      1. password\n      2. image base64 encoded string \n      why base64 encoded string instead of file\n      coz, file need to be resize , so that upload data much not longer than 1 mb \n\n      here, what we do\n      when file has changed ,\n      read file and set to image to show\n      resize image to specific canvas\n      get base64 encoded string from canvas\n      enable upload button\n\n\n    */\n    // change image data on img src and resize to canvas\n    console.log({fileRef,passwordRef,imageTextRef,imgSrc});\n  }\n\n  const sendImage = (evt) =>{\n    console.log(\"sendImage\");\n    evt.preventDefault();\n    let image = imageTextRef.current.value;\n    let password = passwordRef.current.value;\n    if(password.length < 8 ){\n      alert(\"Password has to be minimum 8 char\");\n      return;\n    }\n    send({image,password});\n  }\n\n  const imgOnLoad = (evt) =>{\n    console.log(\"imgOnLoad\");\n  }\n  \n  return (\n      <div>\n          <form  onSubmit={sendImage}>\n            <img alt=\"Image Preview, Choose an image \" src={imgSrc} onLoad={imgOnLoad}  style={{maxWidth:300}} />\n            <br/>\n            <br/>\n\n            <TextField  type=\"file\" autoFocus={true} label=\"File\" variant=\"outlined\" accept=\"images/*\" onChange={fileOnChange}  inputRef={fileRef}  required />\n            <br></br>\n            <br></br>\n\n            <TextField  type=\"text\" label=\"Password\"  minlength=\"8\" variant=\"outlined\" inputRef={passwordRef} required />\n            <br></br>\n            <br></br>\n            \n            <TextField style={{display:\"none\"}} type=\"text\" label=\"Image Data\" variant=\"outlined\" inputRef={imageTextRef} required/>\n            <br></br>\n            <br></br>\n\n              <Button type=\"submit\" variant=\"contained\" color=\"default\">\n               Send\n             </Button>\n            </form>\n        \n        <br></br>\n        <br></br>\n        <span>\n          <ReactLink to=\"aboutapp\"  style={{textDecoration:\"none\"}}>How to use?</ReactLink>          \n        </span>\n        <br></br>\n        <br></br>\n      </div>\n  )\n}\nconst SignUpForm = ({register}) =>{\n  const emailRef = React.createRef();\n  const usernameRef = React.createRef();\n  const passwordRef = React.createRef();\n  const passwordComfirmRef = React.createRef();\n\n  const internalRegister = (evt) =>{\n    evt.preventDefault();\n    console.log(\"internalRegister\");\n    let email = emailRef.current.value;\n    let username = usernameRef.current.value;\n    let password = passwordRef.current.value;\n    let passwordComfirm = passwordComfirmRef.current.value;\n    console.log({username,password});\n    if(username == \"\" || username == undefined) {\n      alert(\"email has to be provided\");\n      return;\n    }\n    if(username == \"\" || username == undefined) {\n      alert(\"username has to be provided\");\n      return;\n    }\n    if(password == \"\"  || username == undefined) {\n      alert(\"password has to be provided\");\n      return;\n    }\n    if(password != passwordComfirm) {\n      alert(\"two password has to be equal\");\n      return;\n    }\n    register({email,username,password});\n  }\n  return (\n      <div>\n        \n        <form  onSubmit={internalRegister}>\n        <TextField type=\"email\"  label=\"Email\" variant=\"outlined\" inputRef={emailRef} required/>\n        <br></br>\n        <br></br>\n        <TextField type=\"text\"  label=\"Username\" variant=\"outlined\" inputRef={usernameRef} required />\n        <br></br>\n        <br></br>\n        <TextField type=\"password\"  label=\"Password\" variant=\"outlined\" inputRef={passwordRef} required />\n        <br></br>\n        <br></br>\n        <TextField type=\"password\"  label=\"Comfirm Password\" variant=\"outlined\" inputRef={passwordComfirmRef}  required/>\n        <br></br>\n        <br></br>\n        <Button type=\"submit\" variant=\"contained\" color=\"default\">\n          Register\n        </Button>\n        </form>\n        <br></br>\n        <br></br>\n        <span>\n          Already registered? <ReactLink to=\"\" style={{textDecoration:\"none\"}}>Sign In</ReactLink> \n        </span>\n        <br></br>\n        <br></br>\n      </div>\n  )\n}\nconst ForgetPasswordForm = (props) =>{\n  return (\n      <div>\n        <p>This is image staganography system.</p>\n        <p>You can send your privacy and confidential image using the Steganography system.</p>\n        <ol>\n          <li>Choose your photo</li>\n          <li>Type password </li>\n          <li>Share link with your partner</li>\n        </ol>\n        <br></br>\n        <br></br>\n        <span>\n          Do you have image to send? <ReactLink to=\"\"  style={{textDecoration:\"none\"}}>Send</ReactLink> \n        </span>\n        <br></br>\n        <br></br>\n      </div>\n  )\n}\nconst MyAccountForm = ({user,update,setUser}) =>{\n  const idRef = React.createRef();\n  const emailRef = React.createRef();\n  const usernameRef = React.createRef();\n  const passwordRef = React.createRef();\n  const passwordComfirmRef = React.createRef();\n\n  //let user = user2;\n\n  const onChangeInput = (key,ref) =>{\n    console.log(\"onChangeInput\"+ref.current.value);\n    //setUser({key:ref.current.value});\n    //console.log(user);\n  }\n  const internalUpdate = () =>{\n    console.log(\"internalUpdate\");\n    let id = idRef.current.value;\n    let email = emailRef.current.value;\n    let username = usernameRef.current.value;\n    let password = passwordRef.current.value;\n    let passwordComfirm = passwordComfirmRef.current.value;\n    console.log({username,password});\n    if(id == \"\" || id == undefined) {\n      alert(\"id has to be provided\");\n      return;\n    }\n    if(username == \"\" || username == undefined) {\n      alert(\"email has to be provided\");\n      return;\n    }\n    if(username == \"\" || username == undefined) {\n      alert(\"username has to be provided\");\n      return;\n    }\n    if(password == \"\"  || username == undefined) {\n      alert(\"password has to be provided\");\n      return;\n    }\n    if(password != passwordComfirm) {\n      alert(\"two password has to be equal\");\n      return;\n    }\n    update({id,email,username,password});\n  }\n  return (\n      <div>\n        <p>{user.role}</p>\n        <TextField type=\"number\" label=\"ID\" variant=\"outlined\" value={user.id} inputRef={idRef}  disabled/>\n        <br></br>\n        <br></br>\n        <TextField type=\"text\"  label=\"Email\" variant=\"outlined\"  defaultValue={user.email} inputRef={emailRef}  />\n        <br></br>\n        <br></br>\n        <TextField type=\"text\" label=\"Username\" variant=\"outlined\"  defaultValue={user.username} inputRef={usernameRef}  />\n        <br></br>\n        <br></br>\n        <TextField type=\"password\" label=\"Password\" variant=\"outlined\" inputRef={passwordRef} />\n        <br></br>\n        <br></br>\n        <TextField type=\"password\" label=\"Comfirm Password\" variant=\"outlined\" inputRef={passwordComfirmRef} />\n        <br></br>\n        <br></br>\n        <Button variant=\"contained\" color=\"default\" onClick={internalUpdate}>\n          Update\n        </Button>\n        \n      </div>\n  )\n}\nconst UserSection = () =>{\n  return (\n    <div>\n      <h5>Project List</h5>\n      <p>This is user section,</p>\n      <ul>\n        <li>Project 1</li>\n        <li>Project 2</li>\n      </ul>\n    </div>\n  )\n}\n\nconst UserEditForm = ({user,update}) =>{\n  const idUserEditRef = React.createRef();\n  const emailUserEditRef = React.createRef();\n  const usernameUserEditRef = React.createRef();\n  const passwordUserEditRef = React.createRef();\n  const passwordComfirmUserEditRef = React.createRef();\n  const roleUserEditRef = React.createRef();\n\n  const internalUpdate = () =>{\n    console.log(\"internalUpdate\");\n    let id = idUserEditRef.current.value;\n    let email = emailUserEditRef.current.value;\n    let username = usernameUserEditRef.current.value;\n    let password = passwordUserEditRef.current.value;\n    let passwordComfirm = passwordComfirmUserEditRef.current.value;\n    let role = roleUserEditRef.current.value;\n    console.log({username,password,email,id,passwordComfirm,role});\n    \n    if(password != passwordComfirm) {\n      alert(\"two password has to be equal\");\n      return;\n    }\n    update({id,email,username,password,role});\n  }\n  return (\n      <div>\n        <p>{user.role}</p>\n        <TextField type=\"number\" label=\"ID\" variant=\"outlined\" value={user.id} inputRef={idUserEditRef}  disabled/>\n        <br></br>\n        <br></br>\n        <TextField type=\"text\" label=\"Email\" variant=\"outlined\"  value={user.username} inputRef={usernameUserEditRef} disabled/>\n        <br></br>\n        <br></br>\n        <TextField type=\"text\" label=\"Username\" variant=\"outlined\" value={user.email} inputRef={emailUserEditRef} disabled/>\n        <br></br>\n        <br></br>\n        <TextField type=\"password\" label=\"Password\" variant=\"outlined\" inputRef={passwordUserEditRef} />\n        <br></br>\n        <br></br>\n        <TextField type=\"password\" label=\"Comfirm Password\" variant=\"outlined\" inputRef={passwordComfirmUserEditRef} />\n        <br></br>\n        <br></br>\n        <FormControl variant=\"outlined\" style={{minWidth: 120}}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">Role</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          label=\"Role\"\n          inputRef={roleUserEditRef}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value=\"register\">Register</MenuItem>\n          <MenuItem value=\"user\">User</MenuItem>\n          <MenuItem value=\"admin\">Admin</MenuItem>\n        </Select>\n      </FormControl>\n\n        <br/>\n        <br/>\n\n        <Button variant=\"contained\" color=\"default\" onClick={internalUpdate}>\n          Update\n        </Button>\n\n        <br/><br/><br/>\n        <ReactLink to=\"/main\"  style={{textDecoration:\"none\"}}>\n                          Back to Main\n        </ReactLink>\n        \n      </div>\n  )\n}\nconst AboutApp = ({activeStep,steps}) =>{\n  return (\n    <div>\n      <p>This is image staganography system.</p>\n        <p>You can send your privacy and confidential image using the Steganography system.</p>\n        <p>Just in three step</p>\n        \n          <Stepper activeStep={activeStep} orientation=\"vertical\">\n          {steps.map((label, index) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n              <StepContent>\n                <Typography>{getStepContent(index)}</Typography>\n                \n              </StepContent>\n            </Step>\n          ))}\n        </Stepper>\n        \n        <br></br>\n        <span>\n          Are you ready? <ReactLink to=\"/\"  style={{textDecoration:\"none\"}}> Send a photo</ReactLink>          \n        </span>\n\n\n    </div>\n  )\n}\n\nconst DialogOk = ({dialogOkState,closeDialogOk}) =>{\n  let {status,title,content} = dialogOkState;\n  return (\n    <Dialog\n        open={status}\n        onClose={closeDialogOk}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeDialogOk} color=\"primary\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\nconst DialogShare = ({dialogShareState,closeDialogShare,shareDialogShare,copyDialogShare}) =>{\n  let {status,title,content} = dialogShareState;\n  return (\n    <Dialog\n        open={status}\n        onClose={closeDialogShare}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"dialogShareContentId\">\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={shareDialogShare} color=\"primary\" autoFocus>\n            Share\n          </Button>\n          <Button onClick={copyDialogShare} color=\"primary\" autoFocus>\n            Copy\n          </Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n\n\nfunction createData(id,username,email,status) {\n  return { id,username,email,status };\n}\n\nconst rows = [\n  createData(1,'user1','user1@gmail.com','register'),\n  createData(2,'user2','user2@gmail.com','register'),\n  createData(3,'user3','user3@gmail.com','user'),\n  createData(4,'user4','user4@gmail.com','admin')\n];\n\n\nfunction App() {\n  //const webserviceBaseUrl = \"http://localhost/\";\n  const webserviceBaseUrl = \"https://mmsoftware100.com/\";\n  //const webserviceAppUrl = \"react_native/api/v1/\";\n  const webserviceAppUrl = \"stegano/api/v1/\";\n  const webserviceMulticontentEndpoint = \"multicontent/index.php\";\n  const webserviceUserEndpoint = \"user/index.php\";\n  const webserviceImageEndpoint = \"image/index.php\";\n  \n  const classes = useStyles();\n  classes.tableBorder = {\n    border : \"1px solid red\"\n  }\n  const [liveData, setLive2ddata] = React.useState({});\n  const [live2dnum, setLive2dnum] = React.useState('--');\n  const [live2dtime, setLive2dtime] = React.useState(Date());\n  const [live2dnine, setLive2dnine] = React.useState({time:\"9:30\",modern:\"02\",\"internet\":\"55\"});\n  const [live2dtwo, setLive2dtwo] = React.useState({time:\"2:00\",modern:\"08\",\"internet\":\"12\"});\n  const [live2dchatmessage, setLive2dchatmessage] = React.useState([{username:\"user1\",message:\"this is message 1 from user 1.\"}]);\n\n  const [checked, setChecked] = React.useState(true);\n  const [liveDataIo, setLiveDataIo] = React.useState(  {\n    '1': {\n      id: '1',\n      num: '43',\n      numtype_id: '1',\n      modified_date: '2020-05-04 09:05:39',\n      numtype: [Object],\n      typename: 'morning2d',\n      typenamemm: 'မနက်ဂဏန်း'\n    },\n    '2': {\n      id: '2',\n      num: '0',\n      numtype_id: '2',\n      modified_date: '2020-05-05 03:05:24',\n      numtype: [Object],\n      typename: 'evening2d',\n      typenamemm: 'ညနေဂဏန်း'\n    },\n    '3': {\n      id: '3',\n      num: '3',\n      numtype_id: '3',\n      modified_date: '2020-05-03 00:00:00',\n      numtype: [Object],\n      typename: 'day3d',\n      typenamemm: 'ယနေ့ဂဏန်း'\n    },\n    '4': {\n      id: '4',\n      num: '31',\n      numtype_id: '4',\n      modified_date: '2020-05-04 09:05:39',\n      numtype: [Object],\n      typename: 'morningset',\n      typenamemm: 'မနက် set'\n    },\n    '5': {\n      id: '5',\n      num: '1',\n      numtype_id: '5',\n      modified_date: '2020-05-04 09:05:39',\n      numtype: [Object],\n      typename: 'eveningset',\n      typenamemm: 'ညနေ set'\n    },\n    '6': {\n      id: '6',\n      num: '17',\n      numtype_id: '6',\n      modified_date: '2020-05-04 09:05:33',\n      numtype: [Object],\n      typename: 'morningget',\n      typenamemm: 'မနက် get'\n    },\n    '7': {\n      id: '7',\n      num: '67',\n      numtype_id: '7',\n      modified_date: '2020-05-04 09:05:33',\n      numtype: [Object],\n      typename: 'eveningget',\n      typenamemm: 'ညနေ get'\n    },\n    '8': {\n      id: '8',\n      num: '32',\n      numtype_id: '8',\n      modified_date: '2020-05-04 09:05:33',\n      numtype: [Object],\n      typename: 'morninginternet',\n      typenamemm: 'မနက် အင်တာနက်ဂဏန်း'\n    },\n    '9': {\n      id: '9',\n      num: '82',\n      numtype_id: '9',\n      modified_date: '2020-05-04 09:05:33',\n      numtype: [Object],\n      typename: 'eveninginternet',\n      typenamemm: 'ညနေ အင်တာနက်ဂဏန်း'\n    },\n    '10': {\n      id: '10',\n      num: '64',\n      numtype_id: '10',\n      modified_date: '2020-05-04 09:05:33',\n      numtype: [Object],\n      typename: 'morningmodern',\n      typenamemm: 'မနက် မော်ဒန်ဂဏန်း'\n    },\n    '11': {\n      id: '11',\n      num: '47',\n      numtype_id: '11',\n      modified_date: '2020-05-04 09:05:33',\n      numtype: [Object],\n      typename: 'eveningmodern',\n      typenamemm: 'ညနေ မော်ဒန်ဂဏန်း'\n    }\n  });\n\n  const handleChange = () => {\n    setChecked((prev) => !prev);\n  };\n\n\n  const [activeStep, setActiveStep] = React.useState(3);\n  const steps = getSteps();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [users,setUsers] = React.useState([]);\n  const [user,setUser] = React.useState({});\n  const [currentEditUser,setCurrentEditUser] = React.useState({});\n  const [decryptedSrc,setDecryptedSrc] = React.useState({});\n\n  const [backdrop,setBackdrop] = React.useState(false);\n  const [backdropText,setBackdropText] = React.useState('Loading...');\n\n  const [internalLink,setInternalLink] = React.useState(window.location.pathname+window.location.hash);\n  const [dialogOkState,setDialogOkState] = React.useState({status:false,title:\"Title\",content:'Content'});\n  const [dialogShareState,setDialogShareState] = React.useState({status:false,title:\"Title\",content:'Content'});\n\n  const [get2dhistorystate,setget2dhistorystate] = React.useState([{date:\"2020-01-01\",time:\"11:00\",number:\"41\"},{date:\"2020-01-01\",time:\"16:00\",number:\"12\"}]);\n  const [get3dhistorystate,setget3dhistorystate] = React.useState([{date:\"2020-01-01\",time:\"16:00\",number:\"123\"},{date:\"2020-01-15\",time:\"16:00\",number:\"456\"}]);\n  \n  \n  var get2dhistorydata = [];\n  const get2dhistory = ({startdate,enddate}) =>{\n    console.log(\"get2dhistory \");\n    console.log({startdate,enddate});\n    // send via socket \n    // data will be received from useEffect socket data.\n    \n    setBackdrop(true);\n    setBackdropText('Searching...');\n  }\n  const get3dhistory = ({startdate,enddate}) =>{\n    console.log(\"get3dhistory \");\n    console.log({startdate,enddate});\n    // send via socket \n    // data will be received from useEffect socket data.\n    \n    setBackdrop(true);\n    setBackdropText('Searching...');\n  }\n\n  // global data for message array\n  var messageListCustom = [{username:\"user1\",message:\"this is message 1 from user 1.\"}];\n  const sendMessage = (msg) =>{\n    console.log(\"sendMessage => \");\n    console.log(msg);\n    messageListCustom =[...live2dchatmessage,msg];\n    // for ui update \n    setLive2dchatmessage([...live2dchatmessage,msg]);\n    // send via socket io\n    scrollToElementD();\n  }\n  const viewDecrypt = ({v,password}) =>{\n    console.log(\"viewDecrypt\");\n    console.log({v,password});\n    \n    setBackdrop(true);\n    setBackdropText('Decrypting...');\n    let formData = new FormData();\n    formData.append(\"v\",v);\n    formData.append(\"password\",password);\n    formData.append(\"ops_type\",\"decrypt\");\n    // we should loop form data \n    let url = webserviceBaseUrl+webserviceAppUrl+webserviceImageEndpoint;\n    var oReq = new XMLHttpRequest();\n    oReq.onload = function(){\n      console.log(\"decrypt oReq : onload\");\n      console.log(this.responseText);\n      let data = this.responseText;\n        console.log(data);\n        console.log(data.length);\n        //data = data.replace(/^\\s+/g, ''); // removing white space , since php ob flash annoy me\n        data = data.trim();\n        console.log(data);\n        try{\n          data = JSON.parse(data);\n        }\n        catch(error){\n          console.log(\"decrypt error in parsing\");\n          data = {};\n        }\n        console.log(data);\n        // set user data \n        setTimeout(function(){\n          if(data.status === true ){\n            setBackdrop(false);\n            openDialogOk({title:\"Decrypted\",content:\"See your image\"});\n            setDecryptedSrc(data.data);\n          }else{\n            setBackdrop(false);\n            openDialogOk({title:\"Fail\",content:data.msg});\n          }\n        },500);\n    };\n\n    oReq.upload.addEventListener(\"progress\", function(oEvent){\n      console.log(\"progress\");\n          if (oEvent.lengthComputable) {\n            var percentComplete = oEvent.loaded / oEvent.total * 100;\n            console.log(percentComplete);\n            percentComplete = parseInt(percentComplete);\n            setBackdropText(\"Uploading ... ( \"+percentComplete+\" % )\");\n            if(percentComplete == 100 ) setBackdropText(\"Processing on Server...\");\n            // ...\n          } else {\n            // Unable to compute progress information since the total size is unknown\n            console.log(\"unknow file size\");\n          }\n    });\n    oReq.onprogress = function(oEvent){\n      console.log(\"onprogress\");\n      //oEvent.loaded;\n      //oEvent.total;\n            console.log(oEvent.loaded);\n            console.log(oEvent.total);\n            var percentComplete = oEvent.loaded / oEvent.total * 100;\n            console.log(percentComplete);\n            percentComplete = parseInt(percentComplete);\n            let kb = oEvent.loaded / 500 ;\n            \n            if(oEvent.total == 0 ) setBackdropText(\"Downloading ... ( \"+kb+\" kb )\");\n            else setBackdropText(\"Downloading ... ( \"+percentComplete+\" % )\");\n            if(percentComplete == 100 ) setBackdropText(\"Complete\");\n            // ...\n          \n            \n    };\n    oReq.open(\"post\", url);\n    oReq.send(formData);\n\n  }\n  const send = ({image,password}) =>{\n    // login operation\n    // setUser on success / fail\n    \n    setInternalLink('');\n    setBackdrop(true);\n    setBackdropText('Sending...');\n    console.log(\"send is calling..\"); \n    let formData = new FormData();\n    formData.append(\"image\",image);\n    formData.append(\"password\",password);\n    formData.append(\"ops_type\",\"send\");\n    // we should loop form data \n    let url = webserviceBaseUrl+webserviceAppUrl+webserviceImageEndpoint;\n    var oReq = new XMLHttpRequest();\n    oReq.onload = function(){\n      console.log(\"oReq : onload\");\n      console.log(this.responseText);\n      let data = this.responseText;\n        console.log(data);\n        console.log(data.length);\n        //data = data.replace(/^\\s+/g, ''); // removing white space , since php ob flash annoy me\n        data = data.trim();\n        console.log(data);\n        try{\n          data = JSON.parse(data);\n        }\n        catch(error){\n          console.log(\"error in parsing\");\n          data = {};\n        }\n        console.log(data);\n        // set user data \n        setTimeout(function(){\n          if(data.status === true ){\n            setBackdrop(false);\n            openDialogShare({title:\"Success, Share your link\",content:data.data});\n            //openDialogOk({title:\"Success, Share your link\",content:data.data});\n               \n          }else{\n            setBackdrop(false);\n            openDialogOk({title:\"Fail\",content:\"Here's message why we fail to send\"});\n          }\n        },500);\n    };\n    oReq.upload.addEventListener(\"progress\", function(oEvent){\n      console.log(\"progress\");\n          if (oEvent.lengthComputable) {\n            \n            var percentComplete = oEvent.loaded / oEvent.total * 100;\n            console.log(percentComplete);\n            percentComplete = parseInt(percentComplete);\n            setBackdropText(\"Sending ... ( \"+percentComplete+\" % )\");\n            if(percentComplete == 100 ) setBackdropText(\"Processing on Server...\");\n            // ...\n          } else {\n            // Unable to compute progress information since the total size is unknown\n            console.log(\"unknow file size\");\n          }\n    });\n    oReq.open(\"post\", url);\n    oReq.send(formData);\n\n    // fetch(url,{\n    //   method : 'POST',\n    //   body : formData\n    // }).then(res=>{\n    //   console.log(res);\n    //   return res.text(); // this is promise , will resolve response text\n    // })\n    // .then(data=>{\n    //   console.log(\"return data  is \");\n    //   console.log(data);\n    //   try{\n    //     data = JSON.parse(data);\n    //   }\n    //   catch(error){\n    //     console.log(\"error in parsing\");\n    //     data = {};\n    //   }\n    //   console.log(data);\n    //   // set user data \n    //   setTimeout(function(){\n    //     if(data.status === true ){\n    //       setBackdrop(false);\n    //       openDialogShare({title:\"Success, Share your link\",content:data.data});\n    //       //openDialogOk({title:\"Success, Share your link\",content:data.data});\n             \n    //     }else{\n    //       setBackdrop(false);\n    //       openDialogOk({title:\"Fail\",content:\"Here's message why we fail to send\"});\n    //     }\n    //   },2000);\n    // })\n    // .catch(err => {\n    //   console.log(\"network error\");\n    //   console.log(err);setTimeout(function(){\n    //     setBackdropText('Network Error');\n    //     setTimeout(function(){\n    //       setBackdrop(false);\n    //     },2000);\n    //   },2000);\n    // });\n    // console.log(\"send : fetch is done\");\n  }\n  const login = ({username,password}) =>{\n    // login operation\n    // setUser on success / fail\n    \n    setInternalLink('');\n    setBackdrop(true);\n    setBackdropText('Signing In...');\n    console.log(\"login is calling..\"); \n    let formData = new FormData();\n    formData.append(\"username\",username);\n    formData.append(\"password\",password);\n    formData.append(\"ops_type\",\"login\");\n    let url = webserviceBaseUrl+webserviceAppUrl+webserviceUserEndpoint;\n    fetch(url,{\n      method : 'POST',\n      body : formData\n    }).then(res=>{\n      console.log(res);\n      return res.text(); // this is promise , will resolve response text\n    })\n    .then(data=>{\n      console.log(\"return data  is \");\n      console.log(data);\n      try{\n        data = JSON.parse(data);\n      }\n      catch(error){\n        console.log(\"error in parsing\");\n        data = {};\n      }\n      console.log(data);\n      // set user data \n      setTimeout(function(){\n        if(data.status === true ){\n          if(data.data.role == \"register\"){\n            setBackdrop(false);\n            openDialogOk({title:\"Admin Approvel\",content:\"You need admin approval before to use your account\"});\n            //setBackdropText('You need admin approval');\n            // setTimeout(function(){\n              \n            // },1000);\n          }\n          else if(data.data.role == \"user\"){\n            //setBackdropText('Login Success'); // alert / snack bar\n            setUser(data.data);\n            localStorage.setItem(\"user\",JSON.stringify(data.data));\n            setInternalLink('usersection');\n            setBackdrop(false);\n            // let limit = 0;\n            // let last_id = 0;\n            // //selectAllUser({limit,last_id});\n            // // we need to call porject list for that user\n            // setTimeout(function(){\n              \n            // },1000);\n            \n          }else{\n            setBackdropText('Login Success');\n            setUser(data.data);\n            localStorage.setItem(\"user\",JSON.stringify(data.data));\n            setInternalLink('main');\n            let limit = 0;\n            let last_id = 0;\n            selectAllUser({limit,last_id});\n          }          \n        }else{\n          setBackdrop(false);\n          openDialogOk({title:\"Login Fail\",content:\"Username and password do not match\"});\n\n          //setBackdropText('Username and password do not match!');\n          // setTimeout(function(){\n          //   setBackdrop(false);\n          // },1000);\n        }\n        \n      },500);\n    })\n    .catch(err => {\n      console.log(\"network error\");\n      console.log(err);setTimeout(function(){\n        setBackdropText('Network Error');\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n  }\n\n  const register = ({email,username,password}) =>{\n    // login operation\n    // setUser on success / fail\n    \n    setInternalLink('signup');\n    setBackdrop(true);\n    setBackdropText('Data uploading...');\n    console.log(\"register is calling..\"); \n    let formData = new FormData();\n    formData.append(\"email\",email);\n    formData.append(\"username\",username);\n    formData.append(\"password\",password);\n    formData.append(\"ops_type\",\"insert\");\n    let url = webserviceBaseUrl+webserviceAppUrl+webserviceUserEndpoint;\n    fetch(url,{\n      method : 'POST',\n      body : formData\n    }).then(res=>{\n      console.log(res);\n      return res.text(); // this is promise , will resolve response text\n    })\n    .then(data=>{\n      console.log(\"register : return data  is \");\n      console.log(data);\n      try{\n        data = JSON.parse(data);\n      }\n      catch(error){\n        console.log(\"register : error in parsing\");\n        data = {};\n      }\n      console.log(data);\n      // set user data \n      setTimeout(function(){\n        if(data.status === true ){\n          setInternalLink('');\n          setBackdropText('Register Success');\n        }else{\n          setBackdropText('Register Fail');\n        }\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n    .catch(err => {\n      console.log(\"Register : network error\");\n      console.log(err);setTimeout(function(){\n        setBackdropText('Register : Network Error');\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n  }\n\n  const update = ({id,email,username,password,role}) =>{\n    // login operation\n    // setUser on success / fail\n    \n    //setInternalLink('myaccount');\n    setBackdrop(true);\n    setBackdropText('Data Updating...');\n    console.log(\"update is calling..\"); \n    let formData = new FormData();\n    \n    if(id === \"\" || id === undefined) {\n      alert(\"id has to be provided\");\n      return;\n    }\n    formData.append(\"id\",id);\n\n    if(email === \"\" || email === undefined) {\n      \n    } \n    else {\n      formData.append(\"email\",email);\n    }\n    if(username === \"\" || username === undefined) {\n      \n    } \n    else {\n      formData.append(\"username\",username);\n    }\n    if(password === \"\" || password === undefined) {\n      \n    } \n    else {\n      formData.append(\"password\",password);\n    }\n    if(role === \"\" || role === undefined) {\n      \n    } \n    else {\n      formData.append(\"role\",role);\n    }\n\n    \n    \n    formData.append(\"ops_type\",\"update\");\n    let url = webserviceBaseUrl+webserviceAppUrl+webserviceUserEndpoint;\n    fetch(url,{\n      method : 'POST',\n      body : formData\n    }).then(res=>{\n      console.log(res);\n      return res.text(); // this is promise , will resolve response text\n    })\n    .then(data=>{\n      console.log(\"update : return data  is \");\n      console.log(data);\n      try{\n        data = JSON.parse(data);\n      }\n      catch(error){\n        console.log(\"update : error in parsing\");\n        data = {};\n      }\n      console.log(data);\n      // set user data \n      setTimeout(function(){\n        if(data.status === true ){\n          let updateUsers = users.map((user)=>{\n            if(user.id == data.data.id){\n              user = data.data;\n            }\n            return user;\n          });\n          \n            \n          let i = 1;\n          let dataTemp = updateUsers.map((d)=>{\n            d.serial_no = i++;\n            return d;\n          });\n          setUsers(dataTemp);\n          setInternalLink('');\n          setInternalLink('/main');\n          setBackdropText('update Success');\n        }else{\n          setBackdropText('update Fail');\n        }\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n    .catch(err => {\n      console.log(\"Register : network error\");\n      console.log(err);setTimeout(function(){\n        setBackdropText('Register : Network Error');\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n  }\n  const editUser = (id) =>{\n    console.log(\"editUser \"+id);\n    let nowUser = users.filter((user)=>{\n      return user.id === id;\n    });\n    console.log(nowUser[0]);\n    setCurrentEditUser(nowUser[0]);\n  }\n  const deleteUser = (id) =>{\n    console.log(\"deleteUser id \"+id);\n    let nowUser = users.filter((user)=>{\n      return user.id === id;\n    });\n    console.log(nowUser[0]);\n\n    var r = window.confirm(\"Are you sure to delete \"+nowUser[0].username);\n    if (r === true) {\n      console.log(\"delete user \"+nowUser[0].username);\n\n      //txt = \"You pressed OK!\";\n      \n      setBackdrop(true);\n      setBackdropText('Deleting...');\n      console.log(\"deleteUser is calling..\"); \n      let formData = new FormData();\n      if(id === \"\" || id === undefined) {\n        alert(\"id has to be provided\");\n        return;\n      }\n      formData.append(\"id\",id);\n      formData.append(\"jwt\",\"thisIsJwt\");\n      formData.append(\"ops_type\",\"delete\");\n      let url = webserviceBaseUrl+webserviceAppUrl+webserviceUserEndpoint;\n      fetch(url,{\n        method : 'POST',\n        body : formData\n      }).then(res=>{\n        console.log(res);\n        return res.text(); // this is promise , will resolve response text\n      })\n      .then(data=>{\n        console.log(\"delete : return data  is \");\n        console.log(data);\n        try{\n          data = JSON.parse(data);\n        }\n        catch(error){\n          console.log(\"userDelete : error in parsing\");\n          data = {};\n        }\n        console.log(data);\n        // set user data \n        setTimeout(function(){\n          if(data.status === true ){\n            let updateUsers = users.filter((user)=>{\n              return user.id !== id\n            });\n            \n          let i = 1;\n          let dataTemp = updateUsers.map((d)=>{\n            d.serial_no = i++;\n            return d;\n          });\n          setUsers(dataTemp);\n\n            //setUsers(updateUsers);\n            //setInternalLink('');\n            //setInternalLink('/main');\n            setBackdropText('delete Success');\n          }else{\n            setBackdropText('Delete Fail');\n          }\n          setTimeout(function(){\n            setBackdrop(false);\n          },500);\n        },500);\n      })\n      .catch(err => {\n        console.log(\"Register : network error\");\n        console.log(err);setTimeout(function(){\n          setBackdropText('Register : Network Error');\n          setTimeout(function(){\n            setBackdrop(false);\n          },500);\n        },500);\n      })\n\n      \n    } else {\n      console.log(\"cancel\");\n      //txt = \"You pressed Cancel!\";\n    }\n  }\n  const selectAllUser = ({limit,last_id}) =>{\n    // login operation\n    // setUser on success / fail\n    \n    setInternalLink('main');\n    setBackdrop(true);\n    setBackdropText('Getting user list from server...');\n    console.log(\"selectAllUser is calling..\"); \n    let formData = new FormData();\n    formData.append(\"jwt\",user.jwt);\n    formData.append(\"limit\",limit);\n    formData.append(\"last_id\",last_id);\n    formData.append(\"ops_type\",\"select\");\n    let url = webserviceBaseUrl+webserviceAppUrl+webserviceUserEndpoint;\n    fetch(url,{\n      method : 'POST',\n      body : formData\n    }).then(res=>{\n      console.log(res);\n      return res.text(); // this is promise , will resolve response text\n    })\n    .then(data=>{\n      console.log(\"selectAllUser : return data  is \");\n      console.log(data);\n      try{\n        data = JSON.parse(data);\n      }\n      catch(error){\n        console.log(\"selectAllUser : error in parsing\");\n        data = {};\n      }\n      console.log(data);\n      // set user data \n      setTimeout(function(){\n        if(data.status === true ){\n          // loop through \n          // set users \n          let i = 1;\n          let dataTemp = data.data.map((d)=>{\n            d.serial_no = i++;\n            return d;\n          });\n          setUsers(dataTemp);\n          localStorage.setItem(\"users\",JSON.stringify(dataTemp));\n          setBackdropText('Select data success');\n        }else{\n          setBackdropText('Username and password do not match!');\n        }\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n    .catch(err => {\n      console.log(\"network error\");\n      console.log(err);setTimeout(function(){\n        setBackdropText('Network Error');\n        setTimeout(function(){\n          setBackdrop(false);\n        },500);\n      },500);\n    })\n  }\n\n  \n  const closeDialogShare = () =>{\n    let obj = {status:false,title:\"Title\",content:'Content'};\n    setDialogShareState(obj);\n  }\n  const copyDialogShare = () =>{\n    // copy dialogShareState.content \n    console.log(\"copyDialogShare\");\n    console.log(dialogShareState);\n    navigator.clipboard.writeText(dialogShareState.content);\n    var copyText = document.getElementById(\"dialogShareContentId\");\n    // copyText.select();\n    // copyText.setSelectionRange(0, 99999)\n    // document.execCommand(\"copy\");\n    // console.log(\"Copied the text: \" + copyText.value);\n    console.log(copyText);\n    closeDialogShare();\n  }\n  const shareDialogShare = () =>{\n    // share dialogShareState.content \n    // may be android call\n    console.log(\"shareDialogShare\");\n    console.log(dialogShareState);\n    try{\n      window.Android.share(\"Here's is an Image for you\",dialogShareState.content);\n      console.log(\"android is ok\");\n      closeDialogShare();\n    }\n    catch(exp){\n      console.log(\"This Feature is only available on Andorid App\");\n      console.log(\"copy instead\");\n      copyDialogShare();\n    }\n\n    \n  }\n  const openDialogShare = ({title,content}) =>{\n    let obj = {status:true,title,content};\n    setDialogShareState(obj);\n  }\n\n  const closeDialogOk = () =>{\n    let obj = {status:false,title:\"Title\",content:'Content'};\n    setDialogOkState(obj);\n  }\n  const openDialogOk = ({title,content}) =>{\n    let obj = {status:true,title,content};\n    setDialogOkState(obj);\n  }\n  const [state, setState] = React.useState({\n    left: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor,logout) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        <ListItem>\n          <ListItemIcon>\n            <AccountBoxIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <ReactLink to=\"/\"  style={{textDecoration:\"none\"}}>2D Live</ReactLink>\n          </ListItemText>\n        </ListItem>\n        \n        \n        <ListItem>\n          <ListItemIcon>\n            <AccountBoxIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <ReactLink to=\"/3dlive\"  style={{textDecoration:\"none\"}}>3D Live</ReactLink>\n          </ListItemText>\n        </ListItem>\n\n\n        <ListItem>\n          <ListItemIcon>\n            <AccountBoxIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <ReactLink to=\"/chatroom\"  style={{textDecoration:\"none\"}}>Chatroom</ReactLink>\n          </ListItemText>\n        </ListItem>\n        \n        \n        \n        <ListItem>\n          <ListItemIcon>\n            <AccountBoxIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <ReactLink to=\"/2dhistory\"  style={{textDecoration:\"none\"}}>2D History</ReactLink>\n          </ListItemText>\n        </ListItem>\n        \n        <ListItem>\n          <ListItemIcon>\n            <AccountBoxIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <ReactLink to=\"/3dhistory\"  style={{textDecoration:\"none\"}}>3D History</ReactLink>\n          </ListItemText>\n        </ListItem>\n        \n        <ListItem>\n          <ListItemIcon>\n            <InfoIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <ReactLink to=\"/aboutapp\"  style={{textDecoration:\"none\"}}>About App</ReactLink>\n          </ListItemText>\n        </ListItem>\n        \n      </List>\n    </div>\n  );\n\nconst logout = () =>{\n  console.log(\"logout\");\n  localStorage.removeItem('user');\n  localStorage.removeItem('users');\n}\n\n      useEffect ( ()=>{\n        // initialization phase \n        console.log(\"useEFfect\");\n        let num = 1;\n\n        socket = socketIOClient(ENDPOINT);\n        // what we have to listen\n        // live 2d and update time\n        // live 2d chat message \n        // 2d history data\n\n        socket.on(\"livedata\", data => {\n          console.log(\"socket Event : livedata\");\n          console.log(data);\n          // switch (data.ops_type) :\n          //     case \"live2d\":\n          //       break;\n          //     default :\n          //       break;\n          setLiveDataIo(data.data);\n          \n        });\n\n\n        setInterval(()=>{\n          // set random no\n          // set live2dnum\n          let char = \"\";\n          num++;\n          if (num > 99 ) num = 0;\n          if(num < 10 ) char = 0+\"\"+num;\n          else char = num;\n          console.log(char);\n          setLive2dnum(char);\n          setLive2dtime(Date());\n          if(num % 5 == 0){\n            setLive2dnine({time:\"9:30\",modern:char,\"internet\":char});\n            setLive2dtwo({time:\"2:00\",modern:char,\"internet\":char});\n          }\n          setChecked((prev) => !prev); \n          setChecked((prev) => !prev);\n\n          // may be from socket io data is coming...\n          let message = \"hey it is \"+Date();\n          let username = \"user\"+char ;\n          console.log(\"loopSendMessage => \"+message);\n          console.log(live2dchatmessage);\n          let msgObj = {username,message};\n          messageListCustom = [...messageListCustom,msgObj]; // set global variable \n          \n          // sendMessage(msgObj);\n          //let Newlive2dchatmessage = [...live2dchatmessage,msgObj];\n          //console.log(Newlive2dchatmessage);\n          setLive2dchatmessage(messageListCustom);\n          scrollToElementD();\n\n          \n          setget2dhistorystate([{date:\"2020-02-01\",time:\"11:00\",number:\"41\"},{date:\"2020-02-01\",time:\"16:00\",number:\"12\"}]);\n          \n          setBackdrop(false);\n          setBackdropText('...');\n\n          // socket.emit(\"data\",{hello:\"world\"});\n\n        \n        },3000);\n        // get current url \n        let url = window.location.href;\n        console.log(url);\n\n        let hash = window.location.hash;\n        console.log(hash.length);\n        if(hash.length > 0 ){\n          hash = hash.substr(1);\n          if(isNaN(hash)){\n            // do nothing\n            console.log(\"useEffect is not nan\");\n          }\n          else{\n            // it is number and i have to redirect to photo view v/343434\n            console.log(\"number is\"+hash);\n            setInternalLink(\"/view/\"+hash);\n          }\n        }\n        socket.on(\"data\", data => {\n          console.log(\"socket Event\");\n          console.log(data);\n        });\n\n        // // get login satus\n        // let userData = localStorage.getItem('user');\n        // console.log(userData);\n        // if(userData == undefined){\n        //   console.log(\"userData is undefined\");\n        // }\n        // else{\n        //   userData = JSON.parse(userData);\n        //   setUser(userData);\n        //   let usersData = JSON.parse(localStorage.getItem('users'));\n        //   setUsers(usersData);\n        //   setInternalLink('/main');\n        //   let limit = 0;\n        //   let last_id = 0;\n        //   selectAllUser({limit,last_id});\n        // }\n      \n      },[]);\n  return (\n    <Router>\n      <div className=\"App\">\n        \n      <Backdrop className={classes.backdrop} open={backdrop}>\n        \n        <div>\n          <p>{backdropText}</p>\n          <CircularProgress color=\"inherit\" />\n        </div>\n        \n      </Backdrop>\n      <DialogOk dialogOkState={dialogOkState} closeDialogOk={closeDialogOk}/>\n      \n      <DialogShare dialogShareState={dialogShareState} closeDialogShare={closeDialogShare} shareDialogShare={shareDialogShare} copyDialogShare={copyDialogShare} />\n      <Redirect to={internalLink} push={true} />\n      <div  className={classes.root}>\n              <AppBar position=\"static\">\n                <Toolbar>\n                  <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                  <MenuIcon onClick={toggleDrawer('left', true)}/>\n                  </IconButton>\n                  <Typography variant=\"h6\" className={classes.title}>\n                    2D/3D Lucky Live\n                  </Typography>\n                  \n                </Toolbar>\n              </AppBar>\n              \n              \n              <div>\n                {['left'].map((anchor) => (\n                  <React.Fragment key={anchor}>\n                    \n                    <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                      {list(anchor,logout)}\n                    </Drawer>\n                  </React.Fragment>\n                ))}\n              </div>\n\n        </div>\n          \n          <br/>\n          \n\n        <Switch>\n          <Route path=\"/\" exact>\n            \n\n\n          <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.liveText}>20</td>\n                    </tr>\n                    <tr>\n                      <td className={classes.headerTwoText}>Updated on 2020-08-11 12:34:56</td>\n                    </tr>\n                  </table>\n\n                  <table  className={classes.tableBackground}>\n                    <tr  >\n                      <td  className={classes.headerOneText} colspan=\"3\">12:00 PM</td>\n                    </tr>\n                    <tr>\n                      <td   className={classes.headerTwoText} >SET</td>\n                      <td    className={classes.headerTwoText} >Value</td>\n                      <td   className={classes.headerTwoText} >2D</td>\n                    </tr>\n                    <tr>\n                      <td>1,234.56</td>\n                      <td>7,890.12</td>\n                      <td   className={classes.headerFourText}>60</td>\n                    </tr>\n                  </table>\n                  \n\n                  <table  className={classes.tableBackground}>\n                    <tr  >\n                      <td  className={classes.headerOneText} colspan=\"3\">4:30 PM</td>\n                    </tr>\n                    <tr>\n                      <td   className={classes.headerTwoText} >SET</td>\n                      <td    className={classes.headerTwoText} >Value</td>\n                      <td   className={classes.headerTwoText} >2D</td>\n                    </tr>\n                    <tr>\n                      <td>3,456.78</td>\n                      <td>9,012.34</td>\n                      <td   className={classes.headerFourText}>82</td>\n                    </tr>\n                  </table>\n                  \n\n                  <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.headerOneText}  rowspan=\"2\">9:30 AM</td>\n                      <td className={classes.headerTwoText}>Modern</td>\n                      <td className={classes.headerTwoText}>Internet</td>\n                    </tr>\n                    <tr>\n                      <td>12</td>\n                      <td>34</td>\n                    </tr>\n                  </table>\n                  \n\n                  <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.headerOneText}  rowspan=\"2\">2:00 PM</td>\n                      <td className={classes.headerTwoText}>Modern</td>\n                      <td className={classes.headerTwoText}>Internet</td>\n                    </tr>\n                    <tr>\n                      <td>56</td>\n                      <td>78</td>\n                    </tr>\n                  </table>\n          </Route>\n\n          \n          <Route path=\"/cc2d\" exact>\n            \n\n\n          <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.liveText}>20</td>\n                    </tr>\n                    <tr>\n                      <td className={classes.headerTwoText}>Updated on 2020-08-11 12:34:56</td>\n                    </tr>\n                  </table>\n\n                  <table  className={classes.tableBackground}>\n                    <tr  >\n                      <td  className={classes.headerOneText} colspan=\"3\">12:00 PM</td>\n                    </tr>\n                    <tr>\n                      <td   className={classes.headerTwoText} >SET</td>\n                      <td    className={classes.headerTwoText} >Value</td>\n                      <td   className={classes.headerTwoText} >2D</td>\n                    </tr>\n                    <tr>\n                      <td>1,234.56</td>\n                      <td>7,890.12</td>\n                      <td   className={classes.headerFourText}>60</td>\n                    </tr>\n                  </table>\n                  \n\n                  <table  className={classes.tableBackground}>\n                    <tr  >\n                      <td  className={classes.headerOneText} colspan=\"3\">4:30 PM</td>\n                    </tr>\n                    <tr>\n                      <td   className={classes.headerTwoText} >SET</td>\n                      <td    className={classes.headerTwoText} >Value</td>\n                      <td   className={classes.headerTwoText} >2D</td>\n                    </tr>\n                    <tr>\n                      <td>3,456.78</td>\n                      <td>9,012.34</td>\n                      <td   className={classes.headerFourText}>82</td>\n                    </tr>\n                  </table>\n                  \n\n                  <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.headerOneText}  rowspan=\"2\">9:30 AM</td>\n                      <td className={classes.headerTwoText}>Modern</td>\n                      <td className={classes.headerTwoText}>Internet</td>\n                    </tr>\n                    <tr>\n                      <td>12</td>\n                      <td>34</td>\n                    </tr>\n                  </table>\n                  \n\n                  <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.headerOneText}  rowspan=\"2\">2:00 PM</td>\n                      <td className={classes.headerTwoText}>Modern</td>\n                      <td className={classes.headerTwoText}>Internet</td>\n                    </tr>\n                    <tr>\n                      <td>56</td>\n                      <td>78</td>\n                    </tr>\n                  </table>\n          </Route>\n          \n          <Route path=\"/3dlive\" exact>\n                  <table  className={classes.tableBackground}>\n                    <tr>\n                      <td className={classes.liveText}>123</td>\n                    </tr>\n                    <tr>\n                      <td className={classes.headerTwoText}>Updated on 2020-08-11 12:34:56</td>\n                    </tr>\n                  </table>\n          </Route>\n\n          \n          <Route path=\"/login\" exact>\n          <LoginForm  login={login} send={send} />\n          </Route>\n\n          <Route path=\"/2dliveOld\" exact>\n            <Live2dPage liveDataIo={liveDataIo} live2dnum={live2dnum} live2dtime={live2dtime} live2dnine={live2dnine} live2dtwo={live2dtwo} checked={checked} />\n          </Route>\n          \n          <Route path=\"/2dchatroom\" exact>\n            <Live2dChatPage liveDataIo={liveDataIo}  checked={checked} live2dchatmessage={live2dchatmessage} sendMessage={sendMessage}/>\n          </Route>\n\n          <Route path=\"/chatroom\" exact>\n            <ChatRoom liveDataIo={liveDataIo}  checked={checked} live2dchatmessage={live2dchatmessage} sendMessage={sendMessage}/>\n          </Route>\n          \n          <Route path=\"/2dhistory\" exact>\n            <Live2dHistoryPage get2dhistory={get2dhistory} get2dhistorystate={get2dhistorystate} />\n          </Route>\n          \n          \n          \n          <Route path=\"/3dhistory\" exact>\n            <Live3dHistoryPage get3dhistory={get3dhistory} get3dhistorystate={get3dhistorystate} />\n          </Route>\n          \n          <Route path=\"/404\" exact>\n            <Title title=\"Requested page is not available\" />\n          </Route>\n          \n          <Route path=\"/aboutapp\" exact>\n            \n            <AboutApp activeStep={activeStep} steps={steps} />\n          </Route>\n          <Route path=\"/view/:v\"   exact>\n            <ViewImage useParams={useParams} viewDecrypt={viewDecrypt} decryptedSrc={decryptedSrc} />\n          </Route>\n          <Route path=\"/photo\"   exact>\n            <p>Hello World</p>\n           <LoginForm  login={login} send={send} />\n\n            \n            \n            <PhotoMainPage />\n          </Route>\n          \n          <Route>\n            <Title title=\"Requested page is not available\" />\n            This is 404 section\n          </Route>\n          \n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}